<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.koron.inwlms.mapper.apparentLoss.ApparentLossMapper">

	<select id="queryMALOverviewData" parameterType="com.koron.inwlms.bean.DTO.apparentLoss.QueryALDTO"
		resultType="com.koron.inwlms.bean.VO.apparentLoss.ALOverviewDataVO">
		select 
		sum(c."AL") as "AL",
		round( avg(c."perCustomerAccAL") :: NUMERIC, 2 ) as "perCustomerAccAL",
		round( avg(c."percentAL") :: NUMERIC, 4 ) as "percentAL",
		round( avg(c."ALI") :: NUMERIC, 4 ) as "ALI",
		round( avg(c."percentNonMeterRead") :: NUMERIC, 4 ) as "percentNonMeterRead",
		round( avg(c."meterReadRate") :: NUMERIC, 4 ) as "meterReadRate",
		round( avg(c."nonMeterReadTimeRate") :: NUMERIC, 4 ) as "nonMeterReadTimeRate",
		round( avg(c."overdueMetersRate") :: NUMERIC, 4 ) as "overdueMetersRate",
		round( avg(c."nonBasicInfoMeterRate") :: NUMERIC, 4 ) as "nonBasicInfoMeterRate"
		FROM (
		select
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 3">
			<!-- DMA/PMA -->
			sum(case when b.code='DMMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='DMMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='DMMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='DMMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='DMMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='DMMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='DMMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='DMMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='DMMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b."yearMonth" as time
		</if>
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 2">
			<!-- 二级分区 -->
			sum(case when b.code='SLMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='SLMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='SLMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='SLMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='SLMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='SLMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='SLMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='SLMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='SLMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b."yearMonth" as time
		</if>
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 1">
			<!-- 一级分区 -->
			sum(case when b.code='FLMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b."yearMonth" as time
		</if>
		from
		(select a.id,a."yearMonth",a.code,a.value,ind.precision as precision 
		from (
			select id,"yearMonth",code,value from ana_apparent_month
			where 1= 1
			<if test="zoneNo != null and zoneNo != ''">
			and "zoneNo" = #{zoneNo}
			</if>
		) a, lc_app_dim_indicator ind, app_dim_month m where ind.code = a.code 
		and m.id = a."yearMonth" and m."yearMonth" &gt;= #{startTime} 
		and m."yearMonth" &lt;= #{endTime}) b
		group by b."yearMonth") c
	</select>

	<select id="queryYALOverviewData" parameterType="com.koron.inwlms.bean.DTO.apparentLoss.QueryALDTO"
		resultType="com.koron.inwlms.bean.VO.apparentLoss.ALOverviewDataVO">
		select 
		sum(c."AL") as "AL",
		round( avg(c."perCustomerAccAL") :: NUMERIC, 2 ) as "perCustomerAccAL",
		round( avg(c."percentAL") :: NUMERIC, 4 ) as "percentAL",
		round( avg(c."ALI") :: NUMERIC, 4 ) as "ALI",
		round( avg(c."percentNonMeterRead") :: NUMERIC, 4 ) as "percentNonMeterRead",
		round( avg(c."meterReadRate") :: NUMERIC, 4 ) as "meterReadRate",
		round( avg(c."nonMeterReadTimeRate") :: NUMERIC, 4 ) as "nonMeterReadTimeRate",
		round( avg(c."overdueMetersRate") :: NUMERIC, 4 ) as "overdueMetersRate",
		round( avg(c."nonBasicInfoMeterRate") :: NUMERIC, 4 ) as "nonBasicInfoMeterRate"
		FROM (
		select
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 3">
			<!-- DMA/PMA -->
			sum(case when b.code='DMYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='DMYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='DMYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='DMYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='DMYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='DMYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='DMYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='DMYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='DMYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b.year as time
		</if>
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 2">
			<!-- 二级分区 -->
			sum(case when b.code='SLYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='SLYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='SLYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='SLYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='SLYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='SLYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='SLYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='SLYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='SLYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b.year as time
		</if>
		<if test="zoneNo != null and zoneNo != '' and zoneRank == 1">
			<!-- 一级分区 -->
			sum(case when b.code='FLYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b.year as time
		</if>
		from
		(select a.id,a.year,a.code,a.value,ind.precision 
		from (
			select id,year,code,value from ana_apparent_year
			where year &gt;= #{startTime} and year &lt;= #{endTime}
			<if test="zoneNo != null and zoneNo != ''">
			and "zoneNo" = #{zoneNo}
			</if>
		) a,lc_app_dim_indicator ind where ind.code = a.code 
		) b group by b.year) c
	</select>
	
	<select id="queryWNMALOverviewData" parameterType="com.koron.inwlms.bean.DTO.apparentLoss.QueryALDTO"
		resultType="com.koron.inwlms.bean.VO.apparentLoss.ALOverviewDataVO">
		select 
		sum(c."AL") as "AL",
		round( avg(c."perCustomerAccAL") :: NUMERIC, 2 ) as "perCustomerAccAL",
		round( avg(c."percentAL") :: NUMERIC, 4 ) as "percentAL",
		round( avg(c."ALI") :: NUMERIC, 4 ) as "ALI",
		round( avg(c."percentNonMeterRead") :: NUMERIC, 4 ) as "percentNonMeterRead",
		round( avg(c."meterReadRate") :: NUMERIC, 4 ) as "meterReadRate",
		round( avg(c."nonMeterReadTimeRate") :: NUMERIC, 4 ) as "nonMeterReadTimeRate",
		round( avg(c."overdueMetersRate") :: NUMERIC, 4 ) as "overdueMetersRate",
		round( avg(c."nonBasicInfoMeterRate") :: NUMERIC, 4 ) as "nonBasicInfoMeterRate"
		FROM (
		select
		<!-- 全网 -->
		sum(case when b.code='WNMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='WNMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='WNMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='WNMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='WNMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='WNMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='WNMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='WNMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='WNMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b."yearMonth" as time
		from
		(select a.id,a."yearMonth",a.code,a.value,ind.precision as precision 
		from ana_company_month a, lc_app_dim_indicator ind, app_dim_month m where ind.code = a.code 
		and m.id = a."yearMonth" and m."yearMonth" &gt;= #{startTime} 
		and m."yearMonth" &lt;= #{endTime}) b
		group by b."yearMonth") c
	</select>
	
	<select id="queryWNYALOverviewData" parameterType="com.koron.inwlms.bean.DTO.apparentLoss.QueryALDTO"
		resultType="com.koron.inwlms.bean.VO.apparentLoss.ALOverviewDataVO">
		select 
		sum(c."AL") as "AL",
		round( avg(c."perCustomerAccAL") :: NUMERIC, 2 ) as "perCustomerAccAL",
		round( avg(c."percentAL") :: NUMERIC, 4 ) as "percentAL",
		round( avg(c."ALI") :: NUMERIC, 4 ) as "ALI",
		round( avg(c."percentNonMeterRead") :: NUMERIC, 4 ) as "percentNonMeterRead",
		round( avg(c."meterReadRate") :: NUMERIC, 4 ) as "meterReadRate",
		round( avg(c."nonMeterReadTimeRate") :: NUMERIC, 4 ) as "nonMeterReadTimeRate",
		round( avg(c."overdueMetersRate") :: NUMERIC, 4 ) as "overdueMetersRate",
		round( avg(c."nonBasicInfoMeterRate") :: NUMERIC, 4 ) as "nonBasicInfoMeterRate"
		FROM (
		select
		sum(case when b.code='WNYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='WNYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='WNYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='WNYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='WNYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='WNYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='WNYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='WNYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='WNYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b.year as time
		from
		(select a.id,a.year,a.code,a.value,ind.precision 
		from (
			select id,year,code,value from ana_company_year
			where year &gt;= #{startTime} and year &lt;= #{endTime}
		) a,lc_app_dim_indicator ind where ind.code = a.code 
		) b group by b.year) c
	</select>

	<select id="queryMALList" resultType="com.koron.inwlms.bean.VO.apparentLoss.ALListVO">
		select
		<if test="(qaDTO.zoneNo == null or  qaDTO.zoneNo == '') and (qaDTO.zoneRank == null or qaDTO.zoneRank == '')">
			<!-- 一级分区 -->
			b."zoneNo" as "zoneNo",
			sum(case when b.code='FLMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		<if test="qaDTO.zoneRank != null and (qaDTO.zoneRank == 2 or qaDTO.zoneRank == 3)">
			<!-- DMA/PMA -->
			b."zoneNo" as "zoneNo",
			sum(case when b.code='DMMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='DMMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='DMMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='DMMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='DMMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='DMMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='DMMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='DMMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='DMMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		<if test="qaDTO.zoneRank != null and qaDTO.zoneRank == 1">
			<!-- 二级分区 -->
			<!-- b."zoneNo" as "zoneNo",
			sum(case when b.code='SLMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='SLMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='SLMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='SLMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='SLMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='SLMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='SLMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='SLMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='SLMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b."yearMonth" as time -->
			<!-- 目前只有一级分区，先展示一级分区的数据 -->
			b."zoneNo" as "zoneNo",
			sum(case when b.code='FLMAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLMALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLMALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLMALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLMNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLMTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLMIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLMOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLMIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		from
		(select a.id,a."yearMonth",a.code,a.value,ind.precision as precision, a."zoneNo" 
		from (
			select id,"yearMonth",code,value, "zoneNo" from ana_apparent_month
			where 1= 1
			<if test="lists != null and lists.size > 0">
				and "zoneNo" in 
				<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
					#{item.zoneNo}    
				</foreach> 
			</if>
		) a, lc_app_dim_indicator ind, app_dim_month m where ind.code = a.code 
		and m.id = a."yearMonth" and m."yearMonth" &gt;= #{qaDTO.startTime} 
		and m."yearMonth" &lt;= #{qaDTO.endTime}) b
		group by b."zoneNo"
		limit #{qaDTO.pageCount} OFFSET #{qaDTO.pageCount}*(#{qaDTO.page}-1);
	</select> 
	
	<select id="countMALList" resultType="java.lang.Integer">
		select count(1) from (select b."zoneNo",b."yearMonth" from 
		(select a.id,a."yearMonth",a.code,a."zoneNo" from
		(select id,"yearMonth",code,value,"zoneNo" from ana_apparent_month where 1= 1
			<if test="lists != null and lists.size > 0">
				and "zoneNo" in 
				<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
					#{item.zoneNo}    
				</foreach> 
			</if>
		) a, 
		lc_app_dim_indicator ind, app_dim_month m where ind.code = a.code and m.id = a."yearMonth" and 
		m."yearMonth" &gt;= #{qaDTO.startTime} and m."yearMonth" &lt;= #{qaDTO.endTime}) b group by b."yearMonth", b."zoneNo") bb
	</select>
	
	<select id="queryYALList" resultType="com.koron.inwlms.bean.VO.apparentLoss.ALListVO">
		select
		<!-- 全网 -->
		<if test="(qaDTO.zoneNo == null or  qaDTO.zoneNo == '') and (qaDTO.zoneRank == null or qaDTO.zoneRank == '')">
			b."zoneNo" as "zoneNo",
			sum(case when b.code='FLYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		<if test="qaDTO.zoneRank != null and (qaDTO.zoneRank == 2 or qaDTO.zoneRank == 3)">
			<!-- DMA/PMA -->
			b."zoneNo" as "zoneNo",
			sum(case when b.code='DMYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='DMYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='DMYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='DMYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='DMYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='DMYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='DMYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='DMYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='DMYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		<if test="qaDTO.zoneRank != null and qaDTO.zoneRank == 1">
			<!-- 一级分区 -->
			<!-- b."zoneNo" as "zoneNo",
			sum(case when b.code='SLYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='SLYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='SLYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='SLYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='SLYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='SLYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='SLYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='SLYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='SLYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate",
			b.year as time -->
			b."zoneNo" as "zoneNo",
			sum(case when b.code='FLYAL' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "AL",
			sum(case when b.code='FLYALCA' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "perCustomerAccAL",
			sum(case when b.code='FLYALR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentAL",
			sum(case when b.code='FLYALI' then round( value/b.precision :: NUMERIC, 2 ) else 0 end) as "ALI",
			sum(case when b.code='FLYNMRR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "percentNonMeterRead",
			sum(case when b.code='FLYTROMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "meterReadRate",
			sum(case when b.code='FLYIMRTR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonMeterReadTimeRate",
			sum(case when b.code='FLYOSMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "overdueMetersRate",
			sum(case when b.code='FLYIBIOMR' then round( value/b.precision :: NUMERIC, 4 ) else 0 end) as "nonBasicInfoMeterRate"
		</if>
		from
		(select a.id,a.year,a.code,a.value,ind.precision,a."zoneNo" 
		from (
			select id,year,code,value, "zoneNo" from ana_apparent_year
			where year &gt;= #{qaDTO.startTime} and year &lt;= #{qaDTO.endTime}
			<if test="lists != null and lists.size > 0">
				and "zoneNo" in 
				<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
					#{item.zoneNo}    
				</foreach> 
			</if>
		) a,lc_app_dim_indicator ind where ind.code = a.code 
		) b
		group by b."zoneNo"
		limit #{qaDTO.pageCount} OFFSET #{qaDTO.pageCount}*(#{qaDTO.page}-1);
	</select>
	
	<select id="countYALList" resultType="java.lang.Integer">
		select count(1) from
		(select a.id,a.year,a.code,a.value,ind.precision 
		from (
			select id,year,code,value from ana_apparent_year
			where year &gt;= #{qaDTO.startTime} and year &lt;= #{qaDTO.endTime}
			<if test="lists != null and lists.size > 0">
				and "zoneNo" in 
				<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
					#{item.zoneNo}    
				</foreach> 
			</if>
		) a,lc_app_dim_indicator ind where ind.code = a.code 
		) b 
	</select>
	
	<!-- <select id="queryMeterQH" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterQH">
		select code as "meterNo",round( max(flux/day/24*2) :: NUMERIC, 6 ) as qh
		from gdh_month_flux_c001_jc
		where month &gt;= #{qaDTO.startTime} || '' and month  &lt;= #{qaDTO.endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item.meterNo}    
			</foreach> 
		</if>
		group by code;
	</select> -->
	
	<select id="queryFSMeterMFlow" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterFlowVO">
		select month as date,sum(flux) as value
		from gdh_month_flux_c001_jc 
		where month &gt;= #{qaDTO.startTime} || '' and month  &lt;= #{qaDTO.endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				<if test="item.meterType != null and item.meterType != '' and item.meterType == 'W10184003'">
					#{item.meterNo} 
				</if>
			</foreach> 
		</if>
		group by month order by month ASC;
	</select>
	
	<select id="queryMMeterReadFlow" resultType="java.lang.Double">
		select round(avg(c.avgFlow) :: NUMERIC, 2 ) from(
		select month,avg(flux) as avgFlow
		from gdh_month_flux_c001_jc 
		where month &gt;= #{qaDTO.startTime} || '' and month  &lt;= #{qaDTO.endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item.meterNo}    
			</foreach> 
		</if>
		group by month) c
	</select>
	
	<select id="queryFsMeterReadData" resultType="java.lang.String">
		select code
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
		and flux = 0.0
	    group by code;
	</select>
	
	<!-- <select id="queryTotalMFlow" resultType="java.lang.Double">
		select round( sum(flux) :: NUMERIC, 2 ) as mFlow
		from gdh_month_flux_c001_jc where
		month = #{time} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    group by month;
	</select> -->
	
	<!-- <select id="queryMeterMFlow" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterMFlowData">
		select code,month,flux
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    order by code,month asc;
	</select> -->
	
	<select id="queryMeterMZeroFlow" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterMFlowData">
		select code,month,flux
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		and flux = 0
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    order by code;
	</select>
	
	<select id="queryMeterMAvgFlow" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterMFlowData">
		select 
		code,
		round( avg(flux) :: NUMERIC, 2 ) as flux
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    group by code;
	</select>
	
	<select id="queryMeterMMaxFlow" resultType="java.lang.Double">
		select 
		round( max(flux) :: NUMERIC, 2 ) as flux
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    group by code;
	</select>
	
	<!-- <select id="queryMeterErrUseData" resultType="com.koron.inwlms.bean.VO.apparentLoss.DrqlMeterErrUseData">
		select code as meterNo,
		avg(flux)-3*stddev(flux) as minV,
		avg(flux)+3*stddev(flux) as maxV
		from gdh_month_flux_c001_jc where
		month &gt;= #{startTime} || '' and month  &lt;= #{endTime} || ''
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    group by code;
	</select> -->
	
	<select id="queryMeterInfoByZoneNo" parameterType="java.lang.String"
	resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterInfo">
		select "CTM_NUM" as accNo,"CTM_NAME" as accName,"TBL_NUM" as meterNo,
		"BORE_VALUE" as meterDn,"TYPE_NAME" as meterType,"CTM_ADDR" address,"YS_NAME" as useType,
		"CB_DAY" mReadDate,DATE_PART('days',now()-to_date("KAI_DATE",'YYYY-MM-DD'))/356 as useYear from rw_fct_ctm  
	</select>
	
	<select id="queryWNMMeterReadFlow" resultType="java.lang.Double">
		select round(avg(c.avgFlow)/10000 :: NUMERIC, 2 ) from(
		select "yearMonth",avg(value) as avgFlow
		from ana_company_month 
		where "yearMonth" &gt;= (select id from lc_app_dim_month where "yearMonth" = #{qaDTO.startTime}) and "yearMonth"  &lt;= (select id from lc_app_dim_month where "yearMonth" = #{qaDTO.endTime})
		group by "yearMonth") c
	</select>
	
	<select id="queryMeterQH" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterQH">
		<!-- select a."CTM_NUM" as meterNo,a."MONTH_ID",max(real_num) as qh from 
		(select "CTM_NUM","MONTH_ID",round( "REAL_NUM"/30/24*2 :: NUMERIC, 6 ) as real_num
		from rw_fct_cb 
		where "MONTH_ID" &gt;= #{qaDTO.startTime} and "MONTH_ID" &lt;= #{qaDTO.endTime}) a group by a."CTM_NUM",a."MONTH_ID"
		 -->
		select b."CTM_NUM" as accNo,b."CTM_NAME" as accName,b."TBL_NUM" as meterNo,
		b."BORE_VALUE" as meterDn,b."CTM_ADDR" address,b."YS_NAME" as useType,b."CB_DAY" mReadDate,a."MONTH_ID",max(real_num) as qh from 
		(select "CTM_NUM","MONTH_ID",round( "REAL_NUM"/30/24*2 :: NUMERIC, 6 ) as real_num
		from rw_fct_cb 
		where "MONTH_ID" &gt;= #{qaDTO.startTime} and "MONTH_ID" &lt;= #{qaDTO.endTime}) a left join 
		rw_fct_ctm b on a."CTM_NUM" = b."CTM_NUM" group by a."CTM_NUM",a."MONTH_ID", b."CTM_NUM",
		b."CTM_NAME",b."TBL_NUM",b."BORE_VALUE",b."CTM_ADDR",b."YS_NAME",b."CB_DAY";
	
	</select>
	
	<select id="queryMeterMFlow" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterMFlowData">
		select "CTM_NUM" as code,"MONTH_ID" as month,"REAL_NUM" as flux
		from rw_fct_cb where 
		"MONTH_ID" &gt;= #{startTime} and "MONTH_ID"  &lt;= #{endTime}
		<if test="lists != null and lists.size > 0">
			and "CTM_NUM" in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item.accNo}    
			</foreach> 
		</if>
	</select>
	
	<select id="queryMeterErrUseData" resultType="com.koron.inwlms.bean.VO.apparentLoss.DrqlMeterErrUseData">
		select "CTM_NUM" as accNo,
		avg("REAL_NUM")-3*stddev("REAL_NUM") as minV,
		avg("REAL_NUM")+3*stddev("REAL_NUM") as maxV
		from rw_fct_cb where
		"MONTH_ID" &gt;= #{startTime} and "MONTH_ID"  &lt;= #{endTime}
		<if test="lists != null and lists.size > 0">
			and "CTM_NUM" in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item.accNo}    
			</foreach> 
		</if>
	    group by "CTM_NUM","REAL_NUM";
	</select>
	
	<select id="queryRTimeUnset" resultType="com.koron.inwlms.bean.VO.apparentLoss.MeterRTimeUnset">
		select count(b.*) as tDNonReadMeterNum,count(c.*) as totalNonReadMeterNum from rw_fct_ctm a left join 
		(select "COPY_DATE","CTM_NUM" from rw_fct_cb where "MONTH_ID" &gt;= #{startTime} and "MONTH_ID"  &lt;= #{endTime}) b
		on a."CTM_NUM" = b."CTM_NUM" and abs(to_date(substring(b."COPY_DATE" from 1 for 7) || '-' || a."CB_DAY",'YYYY-MM-DD') - to_date(b."COPY_DATE",'YYYY-MM-DD')) &gt;= 10 left join 
		(select "COPY_DATE","CTM_NUM" from rw_fct_cb where "MONTH_ID" &gt;= #{startTime} and "MONTH_ID"  &lt;= #{endTime}) c
		on a."CTM_NUM" = c."CTM_NUM" and abs(to_date(substring(c."COPY_DATE" from 1 for 7) || '-' || a."CB_DAY",'YYYY-MM-DD') - to_date(c."COPY_DATE",'YYYY-MM-DD')) &gt;= 3;
	</select>
	
	<select id="queryTotalMFlow" resultType="java.lang.Double">
		select round( sum("REAL_NUM")/100 :: NUMERIC, 2 ) as mFlow
		from rw_fct_cb where
		"MONTH_ID" = #{time}
		<if test="lists != null and lists.size > 0">
			and code in 
			<foreach item="item" collection="lists" separator="," open="(" close=")" index="">    
				#{item}    
			</foreach> 
		</if>
	    group by "MONTH_ID";
	</select>
	
</mapper> 